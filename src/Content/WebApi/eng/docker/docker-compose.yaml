version: "3.4"

networks:
  backend:
    driver: bridge
  frontend:

volumes:
  webapi.postgres-database:

services:
#if(isDatabaseSqlServer)
  sqlserver:
    build:
      context: ./sqlserver/scripts/.
      dockerfile: sqlserver.dockerFile
    ports:
      - "1433:1433"
    networks:
      - backend
      - frontend
#endif
#if(isDatabasePostgres)
  postgres:
    image: postgres:11.12
    volumes:
      - ./postgres/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - webapi.postgres-database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "Postgres2021!"
    ports:
      - "15432:5432"
    networks:
      - backend
      - frontend
#endif
  domain-name.webapi:
    build:
      context: ../../
      dockerfile: ./eng/docker/dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
#if(isDatabaseSqlServer)
      - ConnectionStrings__Default=Server=sqlserver;Database=WebApiDB; User=sa;Password=MyP4ssw0rd_;Pooling=True;Enlist=False; Min Pool Size=101; Max Pool Size=300
#endif
#if(isDatabasePostgres)
      - ConnectionStrings__Default=Server=postgres;Port=5432;Database=WebApiDB;User Id=postgres;Password=Postgres2021!
#endif
    ports:
      - 8080:80
    networks:
      - frontend
      - backend
    #    Choose only one
    depends_on:
#if(isDatabaseSqlServer)      
      - sqlserver
#endif
#if(isDatabasePostgres) 
      - postgres
#endif
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  domain-name.reverse-proxy:
    build:
      context: .
      dockerfile: ./nginx.dockerfile
    ports:
      - 80:80
    networks:
      - frontend
      - backend
    depends_on:
      - domain-name.webapi